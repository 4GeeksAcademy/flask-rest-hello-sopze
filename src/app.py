"""
This module takes care of starting the API Server, Loading the DB and Adding the endpoints
"""
import os, json
from flask import Flask, request, jsonify, url_for
from flask_migrate import Migrate
from flask_swagger import swagger
from flask_cors import CORS
from utils import APIException, generate_sitemap
from admin import setup_admin
from models import db, User, Entity, EntityType, Bookmark

#
#   IMPORTANT NOTES
# Run 'pipenv run upgrade' everytime Codespaces start to create the database
# then use the /db/reset endpoint to fill the database with premade values I manually wrote
#
# NEVER use /db/wipe, that will drop all the tables, I used it internally in the upgrade process of my db
#
# migrate->upgrade was failing every time (flask sqlalchemy doesnt seem to support ALTER nicely) 
# found a solution by:
#   use /db/wipe then stop server
#   remove 'migrations' folder
#   pipenv run init then pipenv run upgrade
#   pipenv run migrate then pipenv run upgrade (again, the first initializes, this one actually creates the models)
#   enjoy your new database
#
# *the wipe is needed to erase the db as we cant access its data directly (its in Codespaces internal storage)
#

app = Flask(__name__)
app.url_map.strict_slashes = False

app.config['SQLALCHEMY_DATABASE_URI'] = "sqlite:////tmp/swapi.db"
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False

MIGRATE = Migrate(app, db)
db.init_app(app)
CORS(app)
setup_admin(app)

__CONTENT_TYPE= {'Content-Type': 'application/json'}

def _response(status, message, data=None):
    return jsonify({ "message": message, "result":data } if not data == None else { "message": message }), status, __CONTENT_TYPE

def _response_200(data=None):
    return _response(200, "ok", data)

def _response_400(data=None):
    return _response(400, "BAD REQUEST", data)

def _response_500(data=None):
    return _response(500, "SERVER ERROR", data)

# dict to track entity type names to its ids, define it on app instance
app.entity_type_nametoid= {}

def _get_entity_type_id(name):
    return app.entity_type_nametoid[name]

def _register_entity_type(name, id):
    app.entity_type_nametoid[name]= id

def _clear_entity_type_registry():
    app.entity_type_nametoid= {}

# api error handling
@app.errorhandler(APIException)
def handle_invalid_usage(error):
    return jsonify(error.to_dict()), error.status_code

# generate sitemap with all your endpoints
@app.route('/')
def sitemap():
    return generate_sitemap(app)

# destroys the entire database, also drops ALL tables
@app.route('/db/wipe', methods=['GET'])
def database_wipe():
    try:
        db.reflect()
        db.drop_all()
        db.session.commit()
    except:
        return _response(500, "couldn't wipe")
    return _response_200()

# print all tables in an ugly string, used to debug
@app.route('/db/print', methods=['GET'])
def database_print():
    print(db.metadata.tables)
    return _response_200()

# this is just for not having to manually create them each time the codespace starts
# also called when pipenv run start if db is empty
@app.route('/db/reset', methods=['GET'])
def database_reset():
    try:
        # clear all data
        _clear_entity_type_registry()
        for table in db.metadata.sorted_tables:
            db.session.execute(table.delete())

        # load defaults from json file
        json_data= json.load(open("data/defaults.json","r"))

        # entity types first as they need to be commited (we do need their autogenerated _id later)
        for entity_type in json_data["entity_type"]:
            instance= EntityType(name=entity_type)
            db.session.add(instance)

        db.session.commit()

        for db_entity_type in EntityType.query.all():
            _register_entity_type(db_entity_type.name, db_entity_type._id)

        # users
        for user_data in json_data["user"]:
            db.session.add(
                User(
                    username=user_data[0],
                    email=user_data[1],
                    password=user_data[2]
                )
            )

        # entities
        for entity_data in json_data["entity"]:
            instance= Entity(
                type_id= _get_entity_type_id(entity_data[0]),
                name= entity_data[1],
                description= entity_data[2],
                properties= json.dumps(entity_data[3]) # dump properties to json string
            )
            db.session.add(instance)
        db.session.commit()
    except:
        return _response_500("couldn't reset")
    return _response_200()


### -------------------------------- USERS -------------------------------- ###

@app.route('/dev/users', methods=['GET'])
def user_getall():
    try:
        query= User.query.all()
        if not query:
            return _response_200("no registered users")
        return _response_200([e.serialize() for e in query])
    except:
        return _response_500()

@app.route('/dev/user/<int:id>', methods=['GET'])
def user_get(id):
    try:
        user= User.query.get(id)
        if not user:
            return _response(404, f"no such user with id: {id}")
        if user.username == "teapot":
            return _response(418, "i'm a teapot", user.serialize())
        return _response_200(user.serialize())
    except:
        return _response_500()

# get API endpoints for each type
@app.route('/api', methods=['GET'])
def apimap():
    result= {
        "films": f"/api/entity/films", 
        "people": f"/api/entity/people", 
        "planets": f"/api/entity/planets", 
        "species": f"/api/entity/species", 
        "starships": f"/api/entity/starships", 
        "vehicles": f"/api/entity/vehicles"
    }
    return _response_200(result)

### -------------------------------- ENTITY TYPES -------------------------------- ###

@app.route('/api/entitytype', methods=['GET'])
def entitytype_getall():
    result= EntityType.query.all()
    if not result:
        return jsonify({ "message": f"no registered entity types" }), 200, __CONTENT_TYPE
    return jsonify({"message":"ok", "result":[e.serialize() for e in result]}), 200, __CONTENT_TYPE

@app.route('/api/entitytype/<int:id>', methods=['GET'])
def entitytype_get(id):
    try:
        result= EntityType.query.get(id)
        if not result:
            return jsonify({ "message": f"no such entity type with id: {id}" }), 404, __CONTENT_TYPE
        return jsonify({"message":"ok", "result":result.serialize()}), 200, __CONTENT_TYPE
    except:
        return _response_500()

### -------------------------------- ENTITIES -------------------------------- ###

# get all entities of given type
def typedentity_getall(typename):
    #try:
        type_id= _get_entity_type_id(typename)
        if not type_id:
            return jsonify({ "message": f"no such entity type '{typename}'" }), 404, __CONTENT_TYPE
        result= Entity.query.filter(Entity.type_id==type_id).all()
        if not result:
            return jsonify({ "message": f"no entities registered of type '{typename}'" }), 404, __CONTENT_TYPE
        return jsonify({"message":"ok", "result":[e.serialize() for e in result]}), 200, __CONTENT_TYPE
    #except:
    #    return __RESPONSE_500

# get entity of given type and id
def typedentity_get(typename, id):
    try:
        type_id= _get_entity_type_id(typename)
        if not type_id:
            return _response(404, f"no such entity type '{typename}'")
        result= Entity.query.filter(Entity.type_id==type_id).get(Entity._tid==id)
        if not result:
            return _response(404, f"no such entity '{typename}' with id: {id}")
        return _response_200(result.serialize())
    except:
        return _response_500()

# ---------------------------------------------------- ENDPOINT: /api/entity
# get all entities
@app.route('/api/entity', methods=['GET'])
def entity_getall():
    try:
        result= Entity.query.all()
        if not result:
            return _response(200, "no registered entities")
        return _response_200([e.serialize() for e in result])
    except:
        return _response_500()

# get all entities of type 
# ---------------------------------------------------- ENDPOINT: /api/entity/<type>
@app.route('/api/entity/<type>', methods=['GET'])
def entity_getall_type(type):
    return typedentity_getall(type)

# get a single entity of type, by id
# ---------------------------------------------------- ENDPOINT: /api/entity/<type>/<id>
@app.route('/api/entity/<type>/<int:id>', methods=['GET'])
def entity_get_type(id):
    return typedentity_get(type, id)

### -------------------------------- BOOKMARKS -------------------------------- ###

# this one requires the token as a header
@app.route('/api/user/bookmarks', methods=['GET'])
def userbookmarks_getall():
    try:
        usertoken= request.headers['token']
        if not usertoken:
            return _response(400, "missing token")
        query= Bookmark.query.filter_by(token= usertoken).first()
        if not query:
            return _response_400("invalid token")
        return _response_200([e.serialize() for e in query])
    except:
        return _response_500()

# this only runs if `$ python src/app.py` is executed
if __name__ == '__main__':
    PORT = int(os.environ.get('PORT', 3000))
    app.run(host='0.0.0.0', port=PORT, debug=False)